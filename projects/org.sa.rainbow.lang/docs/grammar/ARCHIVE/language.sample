// Language design sample
// 
/*
 * Notes about syntax and expected semantics:
 *   "import" imports tactics and objects from other files, and effectively 
 *     imports those names into this namespace, with a renaming possible in
 *     braces after the import statement, in the form <original> as <alias>.
 *     The original name becomes "hidden."
 *   Namespace of variables is static and scoped within enclosing braces.
 *   Hence, to share a variable across condition and action regions, a
 *     "var" declaration is necessary at the beginning of a tactic.
 *   Operators on a model, such as connected(), have to be accessed through
 *     a provided Model object.
 *   The notions of Set and Array are supported in the language.
 *   The [] operator accesses i-th element in an array; it is also the
 *     enclosing delimiter for a constant array.
 *   The {} operator is the enclosing delimiter for a constant Set;
 *     for convenience, {0} on a Set gets any first element in the Set.
 *   Both Array and Set have size property.
 */

/*
 * There's an issue regarding what sort of notification should occur if
 * partial precondition of the tactic is not met, when it's expeted to.
 */

// define a system query library, accessed via a class "Q"
// Q has constant properties:
//   PROP is an object of property literals
//   OP is an object of comparison operator literals
// Methods:
//   getLinkProperty():  retrieves a property on a link, possibly "virtual"
//   find():  finds a set of instances matching a set of constraints
import op rlib/Query.rad { Query as Q };
// define a arch model library
import model rlib/ArchOp.rad { Model as M };
// define a system operator library
import op rlib/SysOp.rad { System as S };

// example of importing other tactics into namespace
import rlib/mytactic.rad;

/* Some meta-data of tactics to keep; these inform tactic selection:
 *  - Resource cost
 *  - Length of duration for tactic operation
 *  - Impact
 *  - Structure area of system affected
 *  - Properties/behavior of system affected
 *  - Effect—what problem is expected to be resolved?
 *  - More generically: cost/benefit
 *  - History—past effectiveness of same tactic under same condition
 *  - User preferences
 *  - Relative significance to other tactics on overall system health/survival
 */
tactic acquiesce (Element e) {
	condition {}  /* required condition-of-applicability block, null means applicable at anytime */
	action {
		// this issues a pause command on element e in the current target system
		// - e, an arch element, will be translated into corresponding system element
		// - "OR throw" causes exception to be thrown if pause fails
		// * do we want an explicit time-out keyword or perhaps one as an argument?
		S.pause(e)
			OR throw new SystemExecutionFailure("Acquiesce " + e + " failed");
	}  /* action block */
	effect {
		// indicates that e is expected to be quiescent at the end of this tactic
		Q.isQuiescent(e);
	}  /* required effect block */
}

// this tactic can, and probably should be written as a strategy
tactic joinNetMeetingUser () {
	var u, g;

	condition {
		exists u: UserT in M.sys.components |
		  (M.declaresType(u, NetMeetingT) and
		   forall c : Component in M.sys.components |
		     M.connected(u, c) == false
		  )
		and
		exists unique g: GatewayT in M.sys.components;  // only one gateway in system
	}
	action {
		int numNMUsers = {select u in M.sys.components | declaresType(u, NetMeetingT)}.size;
		double latency = Q.getLinkProperty(Q.PROP.LATENCY, u, g);

		/* let V: current VGW;
		 *     N_V: max # of NM users for V
		 *     N_NM: # of current NM users
		 *     U: the new user
		 *     L: latency value
		 */

		// if (N_NM < N_V) and (latency(V, U) <= L), use V for U
		if (numNMUsers < g.capacity and latency < M.sys.maxGatewayLatency) {
			// join is a style-specific operator that joins a UserT instance to a GatewayT instance
			acquiesce(u);
			acquiesce(g);
			join(u, g);
		} else {
			// if there exists V' that can serve (N_NM+1) users AND satisfy
			// latency constraint for all users, then use V'
			Set bestGwys = Q.find(GatewayT, /* count to return */ 1,
			  {[Q.PROP.CAPACITY, g, Q.OP.GT, numNMUsers],
			   [Q.PROP.LATENCY, u, Q.OP.LT, M.sys.maxGatewayLatency]});
			GatewayT gw = bestGwys{0};
			if (bestGwys.size > 0) {
				// invoke another tactic
				acquiesce(g);
				acquiesce(gw);
				switchGateway(g, gw);
				acquiesce(u);
				join(u, gw);
			} else {
				// if there exists V" that can serve (N_NM+1) users, use V"
				Set bestGwys = Q.find(GatewayT, 1,
				  {[Q.PROP.CAPACITY, g, Q.OP.GT, numNMUsers]});
				GatewayT gw = bestGwys{0};
				if (bestGwys.size > 0) {
					// invoke another tactic
					acquiesce(g);
					acquiesce(gw);
					switchGateway(g, gw);
					acquiesce(u);
					join(u, gw);
				} else {
					throw new TacticFailure("Cannot find gateway to add new NetMeetingT user " + u);					
				}
			}
		}
	}
	effect {
		exists unique g: GatewayT in M.sys.components |
		  M.connected(u, g);
	}
}

/////// NOTE:  an older variant of Strategy syntax
/* Assuming trigger constraint is:
 *   forall u: UserT in sys.components | u.frameRate >= minFrameRateThreshold
 */
strategy improveUesrLatency {
	// illustrate a constant definition
	int MARGIN = 0.2;
	var u;

	pre {
		// precondition captures the opposite of violated constraint
		exists u: UserT in M.sys.components |
		  u.frameRate < M.sys.minFrameRateThreshold
	}

	/* this name is picked to invoke the notion of a plan within a strategy,
	   and it does imply that a planner algorithm could be associated to
	   produce a plan of "tactic flow" within a strategy */
	plan {
		/* Chains of conditon-tactic pairs can be specified, with each condition
		 * having a likelihood interval (each interval value is between 0 and 1).
		 * Multiple chains allow concurrent tactics if adorned with "concurrent";
		 * this indicates a conscious choice of concurrency by the strategy writer.
		 * 
		    condA [i1,j1] : tact1 ->
		    condB [i2,j2] : tact2a , tact2b ->
		    condC [i3,j3] : tact3;

		    concurrent condD [i4,j4] : tact4 ->
		    condE [i5,j5] : tact5 ->
		*/
		// conditions can be stored in "state tokens"
		s1 = u.frameRate < 0.9 * M.sys.minFrameRateThreshold and
		     u.bandwidth < M.sys.minBandwidth
		s2 = u.frameRate < 0.9 * M.sys.minFrameRateThreshold and
		     u.bandwidth >= M.sys.minBandwidth

		s1 [0,0.9] : acquiesce(u) , swapUser ->
		s2 and
		  exists g: GatewayT in M.sys.components | connected(u, g) [0.1,0.5] :
		  acquiesce(g) , swapGateway
	}

	post {
		// postcondition should at least capture the constraint condition,
		// and potentially more
		u.frameRate > (1 + MARGIN) * M.sys.minFrameRateThreshold
	}

	error {
		// if no tactic matches AND postcondition is not met, or if any error
		// occurs during execution of tactic, this error block is invoked.
		// 
		// What do we do though??
	}
}


strategy perfStrat (int param) {
	// strategy gets namespace of tactics

	t0: (#[prob{t0}] c0 @[2s]) -> Ta(param) {
		t1: (#[prob{t1}] success @[1s]) -> done;  // Ta's designated effect was achieved
		t2: (#[prob{t2}] c2 @[1s]) -> Tb(param) (exit_cond @[10s]) {
			t2b: (#[prob{t2b}] success @[50ms]) -> done;
			t2c: (#[prob{t2c}] c2c @[50ms]) -> do[k] t0;  // repeat the branch rooted at t0 no more than k times
		}
		t3: (#[prob{t3}] c3 @[1s]) -> Tc | done;  // don't care about effect of Tc, just after
		t4: (#[prob{t4}] default) -> TNULL | done;  // none of the branches at this level matched, invoke null tactic and complete strategy
	}
}
