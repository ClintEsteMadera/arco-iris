module alpha2;

import rlib/Query.rad { Query as Q };
import rlib/ArchOp.rad { Model as M };
import rlib/SysOp.rad { System as S };

tactic name (int param) {
	var u, g;  // unbound variable, declared in namespace before usage

	condition {  // *NOTE* individually listed conditions are conjoined
		// Acme and first-order pred logic syntax included here
		exists unique g: GatewayT in M.sys.components;  // only one gateway in system
		exists u: UserT in M.sys.components |
		  (M.declaresType(u, NetMeetingT) and
		   forall var c : Component in M.sys.components |
		     M.connected(u, c) == false
		  );
	}
	action {
	    // Flow control constructs here
		// Acme and first-order pred logic syntax included here
		if (true) { 
		} else if (cond2) {
		} else {
		}
		for ( ; ; ) {  // as in java construct
		}
		for (Type item : set) {  // as in java 5.0 construct
		}
		{
			;
			;
		} fail {
			(<condition>) {
			}  // conceivable to introduce handler construct in the future
		}
	}
	effect {  // NOTE: these are effects anticipated at tactic design-time...
		// Acme and first-order pred logic syntax included here
		exists unique g: GatewayT in M.sys.components |
		  M.connected(u, g);
	}
}

strategy perfStrat (int param) {
	// NOTE:  conditions here are those matched at run-time, and can thus depart
	// from the tactic's designated effects

	// strategy gets namespace of tactics

	// TODO 1:  How to incorporate branch probabilities to be updateable/orthogonal?
	// TODO 2:  Timing??  two kinds: duration and expiration (as force exit condition)
	// TODO 3:  Where to incorporate attribute info?
	// TODO 4:  Where to keep utility pref info?
	// TODO 5:  Do I need an overall pre/post condition for strategy,
	//          or are the root condition and the exit success conditions
	//          respectively sufficient?

	t0: (#[prob{t0}] c0 @[2s]) -> Ta(param) {
		t1: (#[prob{t1}] success @[1s]) -> done;  // Ta's designated effect was achieved
		t2: (#[prob{t2}] c2 @[1s]) -> Tb(param) (exit_cond @[10s]) {
			t2b: (#[prob{t2b}] success @[50ms]) -> done;
			t2c: (#[prob{t2c}] c2c @[50ms]) -> do[k] t0;  // repeat the branch rooted at t0 no more than k times
		}
		t3: (#[prob{t3}] c3 @[1s]) -> Tc | done;  // don't care about effect of Tc, just after
		t4: (#[prob{t4}] default) -> TNULL | done;  // none of the branches at this level matched, invoke null tactic and complete strategy
	}
}
