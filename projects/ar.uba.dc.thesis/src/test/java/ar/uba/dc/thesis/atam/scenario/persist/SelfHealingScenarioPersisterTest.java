package ar.uba.dc.thesis.atam.scenario.persist;

import junit.framework.TestCase;
import ar.uba.dc.thesis.dao.SelfHealingConfigurationDao;
import ar.uba.dc.thesis.dao.TestSelfHealingConfigurationDao;

public class SelfHealingScenarioPersisterTest extends TestCase {

	private static final String SCENARIOS_IN_XML_FULL_PATH = "src/test/resources/testScenarios.xml";

	private SelfHealingConfiguration testSHConfiguration;

	public SelfHealingScenarioPersisterTest() {
		super();
		this.testSHConfiguration = this.loadTestConfiguration();
	}

	/**
	 * Tests the correct marshaling of an instance of {@link SelfHealingConfiguration} to an XML. <br>
	 * The test fails if an exception is thrown during the marshaling process.
	 */
	public void testMarshal() {
		try {
			new SelfHealingScenarioPersister().saveToFile(this.testSHConfiguration, SCENARIOS_IN_XML_FULL_PATH);
		} catch (Exception e) {
			fail("Unexpected Exception: " + e.getMessage());
		}
	}

	/**
	 * Takes the XML generated by {@link #testMarshal()} and uses it to unmarshal a {@link SelfHealingConfiguration}
	 * object.
	 * <p>
	 * Should no exception is thrown, the test pass if and only if the original and the unmarshaled objects are exactly
	 * the same as specified by {@link SelfHealingConfiguration#equals(Object)}
	 * <p>
	 * In the event of an exception during the unmarshaling process, the test fails.
	 */
	public void testUnmarshal() {
		try {
			SelfHealingConfiguration unmarshaledConfig = new SelfHealingScenarioPersister()
					.readFromFile(SCENARIOS_IN_XML_FULL_PATH);
			assertEquals(this.testSHConfiguration, unmarshaledConfig);
		} catch (Exception e) {
			fail("Unexpected Exception: " + e.getMessage());
		}
	}

	private SelfHealingConfiguration loadTestConfiguration() {
		SelfHealingConfigurationDao shConfigDao = new TestSelfHealingConfigurationDao();

		SelfHealingConfiguration configToMarshal = new SelfHealingConfiguration("test", shConfigDao.getAllArtifacts(),
				shConfigDao.getAllNonDefaultEnvironments(), shConfigDao.getAllScenarios());
		return configToMarshal;
	}
}
