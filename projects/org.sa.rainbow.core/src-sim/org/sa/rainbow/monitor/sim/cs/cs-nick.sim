# Property file defining the system and simulation plan */
sim.class = org.sa.rainbow.monitor.sim.cs.ClientServerSim

# each simulation point element is a comma-delimited list of
# colon-delimited tuples of
#   <timestamp>:<element to change>:<new value to set>
sim.0 =
sim.1 = 1000:c2.connection.bandwidth:100, 1010:c2.latency:3000
sim.2 = 2000:sg1.perf.service.time:100, 2020:c5.latency:4000
sim.3 = 3000:c3.latency:5000, 3020:sg2.perf.service.time:100, 3030:sg1.perf.service.time:100
sim.4 = 4000:c1.latency:3000, 4020:c1.connection.bandwidth:20
sim.5 = 5000:c4.latency:3000, 5020:c4.connection.bandwidth:20,  5040:c4.alternative.bandwidth:20, 3030:sg1.perf.service.time:100
# terminate system at 10 seconds
sim.6 = 10000:sim:terminate
# should be he number of sim points (k if sim.k-1)
sim.size = 7

# list the elements on which to explicitly check rules
elements = c1, c2, c3, c4, c5, c6, sg1, sg2
elements.check = c1, c2, c3, c4, c5, c6
client.count = 6
sg.count = 2
# initial properties and performance simulation seed values
c1.connection.target = sg1
c1.latency = 0
# kbps
c1.connection.bandwidth = 500
c1.alternative.bandwidth = 400
# ms
c1.perf.service.time = 3
# req/s
c1.perf.arrival.rate = 30
c2.connection.target = sg1
c2.latency = 0
c2.connection.bandwidth = 350
c2.alternative.bandwidth = 400
c2.perf.service.time = 2
c2.perf.arrival.rate = 75
c3.connection.target = sg1
c3.latency = 0
c3.connection.bandwidth = 180
c3.alternative.bandwidth = 400
c3.perf.service.time = 4
c3.perf.arrival.rate = 10
c4.connection.target = sg1
c4.latency = 0
c4.connection.bandwidth = 410
c4.alternative.bandwidth = 400
c4.perf.service.time = 1
c4.perf.arrival.rate = 40
c5.connection.target = sg1
c5.latency = 0
c5.connection.bandwidth = 320
c5.alternative.bandwidth = 400
c5.perf.service.time = 5
c5.perf.arrival.rate = 20
c6.connection.target = sg1
c6.latency = 0
c6.connection.bandwidth = 480
c6.alternative.bandwidth = 400
c6.perf.service.time = 3
c6.perf.arrival.rate = 5
sg1.load = 0
sg1.replication = 3
# ms
sg1.perf.service.time = 13
sg2.load = 0
sg2.replication = 2
sg2.perf.service.time = 13

# average request and response size
# kb
perf.request.size = 5
# kb
perf.response.size = 200

# latency constraint threshold
# ms
latency.max = 2000
# other thresholds to help assess good-/bad-ness
# kbps
bandwidth.min = 50
load.max = 0.95

# Decision table for describing states of interest to Learner:
#                                 1  2  3  4  5  6
#          target client latency  g  b  b  b  b  b
#     client-connected bandwidth  -  g  g  g  b  b
#   client-connected server load  -  g  b  b  -  -
#     client alternative viable?  -  -  g  b  g  b
# --------------------------------------------------
#                     Do Nothing  X  X           X
#                     Add Server        X  X
#                                      OR
#                    Move Client        X     X
#  1: g
#  0: b
# -1: don't cares
# states.0 should capture the good state
states.0 = 1 -1 -1 -1
states.1 = 0 1 1 -1
states.2 = 0 1 0 1
states.3 = 0 1 0 0
states.4 = 0 0 -1 1
states.5 = 0 0 -1 0
states.size = 6

# repair.0 is null repair, do nothing
repair.0 = NULL
# repair.1 adds server
repair.1 = ${connection.target}.replication++, ${connection.target}.perf.service.time = 13
# repair.2 moves client to different server
repair.2 = connection.target = sg1|sg2
repair.size = 3

# constraints/rules, basic binary relational expressions only
rule.0 = ${latency}<${latency.max}
rule.0.constraint = true
rule.1 = ${connection.bandwidth}>${bandwidth.min}
rule.2 = ${load}<${load.max}
rule.3 = ${alternative.bandwidth}>${bandwidth.min}
rule.size = 4

# this is the alpha factor to compute exponential average
alpha = 0.25
